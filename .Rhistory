shiny::runApp('Desktop/Website Projects/ShinyApp')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(writeWave)
help(readWave)
runApp()
runApp()
runApp()
hello <- c(1,2,3)
match(hello, 1)
hello <- c(1,1,2,3,4)
match(hello, 1)
anns <- match(hello, 1)
anns
allGrids <- load_textGrids()
grid <- allGrids[[2]][[1]]
t <- grid[["phones"]]
index_of_regex <- match(t$labels, regex)
index_of_regex <- match(t@labels, regex)
index_of_regex <- match(t@labels, "a")
index_of_regex <- match(t@labels, "w")
length(t@labels)
leftIndex <- min(x-1,1)
left_neighbor_interval <- t@startTimes[5]
left_neighbor_interval <- t@startTimes[[5]]
left_neighbor_interval <- t@startTimes[[6]]
left_neighbor_interval <- t@startTimes[[5]]
t@labels[5]
t@labels[6]
t@labels[4]
runApp()
runApp()
numeric(0)
runApp()
runApp()
runApp()
runApp()
hi which("a" == c("b","c"))
hi <- which("a" == c("b","c"))
which("a" == c("b","c"))
which("a" == c("b","a"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
t@name
t@labels
intervals <- findIntervals(tier=t, pattern="p")
intervals$Label
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
h <- 5
h = h+1
h
h = h+1
h
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
lt <-list(1,2,3,4,5)
lapply(max((x-1),1), lt)
lapply(lt, max((x-1), 1))
lapply(lt, max((X-1), 1))
lapply(lt, max(1))
lapply(lt, max
)
lapply(lt, max)
lapply(lt, min)
sapply(lt, min)
sapply(lt, max)
sapply(lt, max(1))
source("~/Git-Projs/InfantSpeechApp/utils.R")
source("~/Git-Projs/InfantSpeechApp/utils.R")
sapply(lt, max(1))
checkLeft <- function(x) max((x-1),1)
sapply(lt, checkLeft)
hi <- lapply(lt, checkLeft)
source("~/Git-Projs/InfantSpeechApp/utils.R")
source("~/Git-Projs/InfantSpeechApp/utils.R")
source("~/Git-Projs/InfantSpeechApp/utils.R")
source("~/Git-Projs/InfantSpeechApp/utils.R")
source("~/Git-Projs/InfantSpeechApp/utils.R")
source("~/Git-Projs/InfantSpeechApp/utils.R")
source("~/Git-Projs/InfantSpeechApp/utils.R")
source("~/Git-Projs/InfantSpeechApp/utils.R")
source("~/Git-Projs/InfantSpeechApp/utils.R")
source("~/Git-Projs/InfantSpeechApp/utils.R")
source("~/Git-Projs/InfantSpeechApp/utils.R")
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/Git-Projs/InfantSpeechApp/utils.R")
runApp()
runApp()
source("~/Git-Projs/InfantSpeechApp/utils.R")
runApp()
runApp()
source("~/Git-Projs/InfantSpeechApp/utils.R")
runApp()
runApp()
runApp()
runApp()
runApp()
#ERROR
print(leftIndex[x])
runApp()
runApp()
runApp()
source("~/Git-Projs/InfantSpeechApp/utils.R")
runApp()
source("~/Git-Projs/InfantSpeechApp/utils.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/Git-Projs/InfantSpeechApp/utils.R")
runApp()
source("~/Git-Projs/InfantSpeechApp/utils.R")
source("~/Git-Projs/InfantSpeechApp/utils.R")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
